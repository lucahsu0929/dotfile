#include <stdio.h>
#include <stdlib.h>
#include <stdbool.h>

#define MAX_KEYS 3  // Maximum keys per node (order of B+ tree - 1)
#define MAX_CHILDREN (MAX_KEYS + 1)

// Global variables to simulate tree structure
int tree[MAX_CHILDREN][MAX_KEYS + 1];  // Array for nodes: [child pointers, keys]
int node_count = 1;                    // Tracks the number of nodes created
int root = 0;                          // Root node index

// Function declarations
void initialize_tree();
void insert(int key);
void delete (int key);
void search(int key);
void split(int node, int parent);
void merge(int node, int parent);
void print_tree();

// Initialize the tree
void initialize_tree() {
    for (int i = 0; i < MAX_CHILDREN; i++) {
        for (int j = 0; j <= MAX_KEYS; j++) {
            tree[i][j] = -1;  // Initialize tree to empty
        }
    }
    root = 0;
}

// Insert a key into the B+ tree
void insert(int key) {
    int current = root;
    int parent = -1;

    while (true) {
        // Find position to insert key in the current node
        int pos = 0;
        while (pos < MAX_KEYS && tree[current][pos] != -1 && tree[current][pos] < key) {
            pos++;
        }

        if (tree[current][MAX_KEYS] == -1) {  // Leaf node
            for (int i = MAX_KEYS - 1; i >= pos; i--) {
                tree[current][i + 1] = tree[current][i];  // Shift keys to make room
            }
            tree[current][pos] = key;
            break;
        } else {  // Internal node
            parent = current;
            current = tree[current][pos];  // Move to the next child
        }
    }

    // Handle split if node is full
    if (tree[current][MAX_KEYS] != -1) {
        split(current, parent);
    }
}

// Split a node when it becomes full
void split(int node, int parent) {
    int mid = MAX_KEYS / 2;
    int new_node = node_count++;

    // Move the second half of keys to the new node
    for (int i = mid + 1; i < MAX_KEYS; i++) {
        tree[new_node][i - mid - 1] = tree[node][i];
        tree[node][i] = -1;
    }

    // Handle child pointers if internal node
    if (tree[node][MAX_KEYS] != -1) {
        tree[new_node][MAX_KEYS] = tree[node][MAX_KEYS];
        tree[node][MAX_KEYS] = -1;
    }

    // Insert the middle key into the parent
    if (parent == -1) {
        // Create a new root
        parent = node_count++;
        root = parent;
        tree[parent][0] = node;
    }

    int pos = 0;
    while (pos < MAX_KEYS && tree[parent][pos] != -1 && tree[parent][pos] < tree[node][mid]) {
        pos++;
    }

    for (int i = MAX_KEYS - 1; i >= pos; i--) {
        tree[parent][i + 1] = tree[parent][i];
        tree[parent][i + 1 + MAX_KEYS] = tree[parent][i + MAX_KEYS];
    }

    tree[parent][pos] = tree[node][mid];
    tree[node][mid] = -1;
    tree[parent][pos + MAX_KEYS] = new_node;
}

// Delete a key from the B+ tree
void delete (int key) {
    int current = root;
    int parent = -1;

    while (current != -1) {
        int pos = 0;
        while (pos < MAX_KEYS && tree[current][pos] != -1 && tree[current][pos] < key) {
            pos++;
        }

        if (tree[current][pos] == key) {
            // Key found, remove it
            for (int i = pos; i < MAX_KEYS - 1; i++) {
                tree[current][i] = tree[current][i + 1];
            }
            tree[current][MAX_KEYS - 1] = -1;

            // Handle underflow
            if (tree[current][0] == -1 && parent != -1) {
                merge(current, parent);
            }
            return;
        } else if (tree[current][MAX_KEYS] != -1) {
            parent = current;
            current = tree[current][pos];
        } else {
            break;
        }
    }

    printf("Key %d not found.\n", key);
}

// Merge nodes to handle underflow
void merge(int node, int parent) {
    // TODO: Implement merge logic for underflow
}

// Search for a key in the B+ tree
void search(int key) {
    int current = root;

    while (current != -1) {
        int found = 0;
        for (int i = 0; i < MAX_KEYS; i++) {
            if (tree[current][i] == key) {
                printf("Key %d found in node %d at position %d\n", key, current, i);
                return;
            } else if (tree[current][i] > key || tree[current][i] == -1) {
                found = 1;
                current = tree[current][i + MAX_KEYS];
                break;
            }
        }

        if (!found) {
            break;
        }
    }

    printf("Key %d not found.\n", key);
}

// Print the B+ tree
void print_tree() {
    for (int i = 0; i < node_count; i++) {
        printf("Node %d: ", i);
        for (int j = 0; j < MAX_KEYS; j++) {
            if (tree[i][j] != -1) {
                printf("%d ", tree[i][j]);
            }
        }
        printf("| Children: ");
        for (int j = 0; j < MAX_KEYS; j++) {
            if (tree[i][j + MAX_KEYS] != -1) {
                printf("%d ", tree[i][j + MAX_KEYS]);
            }
        }
        printf("\n");
    }
}

int main() {
    initialize_tree();

    insert(10);
    insert(20);
    insert(30);
    insert(40);
    insert(50);

    print_tree();

    search(20);
    search(25);

    delete (20);
    print_tree();

    return 0;
}

