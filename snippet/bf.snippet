#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <math.h>

#define BIT_ARRAY_SIZE 1000 // Size of the bit array
#define NUM_HASH_FUNCTIONS 3 // Number of hash functions

// Global bit array
unsigned char bit_array[BIT_ARRAY_SIZE];

// Simple hash functions
unsigned int hash1(const char *str) {
    unsigned int hash = 0;
    while (*str) {
        hash = (hash * 31) + *str++;
    }
    return hash % BIT_ARRAY_SIZE;
}

unsigned int hash2(const char *str) {
    unsigned int hash = 5381;
    while (*str) {
        hash = ((hash << 5) + hash) + *str++; // hash * 33 + c
    }
    return hash % BIT_ARRAY_SIZE;
}

unsigned int hash3(const char *str) {
    unsigned int hash = 0;
    int i = 0;
    while (*str) {
        hash += (*str++) * (i + 1);
        i++;
    }
    return hash % BIT_ARRAY_SIZE;
}

// Initialize the bit array
void initialize() {
    memset(bit_array, 0, sizeof(bit_array));
}

// Add an element to the Bloom filter
void add(const char *str) {
    unsigned int h1 = hash1(str);
    unsigned int h2 = hash2(str);
    unsigned int h3 = hash3(str);

    bit_array[h1] = 1;
    bit_array[h2] = 1;
    bit_array[h3] = 1;
}

// Check if an element is possibly in the Bloom filter
int contains(const char *str) {
    unsigned int h1 = hash1(str);
    unsigned int h2 = hash2(str);
    unsigned int h3 = hash3(str);

    return bit_array[h1] && bit_array[h2] && bit_array[h3];
}

// Main function to demonstrate the Bloom filter
int main() {
    initialize();

    add("hello");
    add("world");

    if (contains("hello")) {
        printf("'hello' is possibly in the Bloom filter.\n");
    } else {
        printf("'hello' is NOT in the Bloom filter.\n");
    }

    if (contains("world")) {
        printf("'world' is possibly in the Bloom filter.\n");
    } else {
        printf("'world' is NOT in the Bloom filter.\n");
    }

    if (contains("test")) {
        printf("'test' is possibly in the Bloom filter.\n");
    } else {
        printf("'test' is NOT in the Bloom filter.\n");
    }

    return 0;
}
