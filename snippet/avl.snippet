#include <stdio.h>
#include <stdlib.h>

// Define the structure for an AVL tree node
typedef struct AVLNode {
    int key;
    int value;
    struct AVLNode* left;
    struct AVLNode* right;
    int height;
} AVLNode;

// Function to get the height of a node
int height(AVLNode* node) {
    if (node == NULL) return 0;
    return node->height;
}

// Function to get the balance factor of a node
int getBalance(AVLNode* node) {
    if (node == NULL) return 0;
    return height(node->left) - height(node->right);
}

// Function to perform a right rotation
AVLNode* rightRotate(AVLNode* y) {
    AVLNode* x = y->left;
    AVLNode* T2 = x->right;

    // Perform rotation
    x->right = y;
    y->left = T2;

    // Update heights
    y->height = 1 + (height(y->left) > height(y->right) ? height(y->left) : height(y->right));
    x->height = 1 + (height(x->left) > height(x->right) ? height(x->left) : height(x->right));

    // Return new root
    return x;
}

// Function to perform a left rotation
AVLNode* leftRotate(AVLNode* x) {
    AVLNode* y = x->right;
    AVLNode* T2 = y->left;

    // Perform rotation
    y->left = x;
    x->right = T2;

    // Update heights
    x->height = 1 + (height(x->left) > height(x->right) ? height(x->left) : height(x->right));
    y->height = 1 + (height(y->left) > height(y->right) ? height(y->left) : height(y->right));

    // Return new root
    return y;
}

// Function to insert a new key-value pair into the AVL tree
AVLNode* insert(AVLNode* node, int key, int value) {
    // 1. Perform the normal BST insert
    if (node == NULL) {
        AVLNode* newNode = (AVLNode*)malloc(sizeof(AVLNode));
        newNode->key = key;
        newNode->value = value;
        newNode->left = newNode->right = NULL;
        newNode->height = 1;
        return newNode;
    }

    if (key < node->key) {
        node->left = insert(node->left, key, value);
    } else if (key > node->key) {
        node->right = insert(node->right, key, value);
    } else {
        // Duplicate keys are not allowed, so we update the value
        node->value = value;
        return node;
    }

    // 2. Update the height of the ancestor node
    node->height = 1 + (height(node->left) > height(node->right) ? height(node->left) : height(node->right));

    // 3. Get the balance factor of the node to check whether it became unbalanced
    int balance = getBalance(node);

    // If the node becomes unbalanced, then there are 4 cases

    // Left Left Case
    if (balance > 1 && key < node->left->key) {
        return rightRotate(node);
    }

    // Right Right Case
    if (balance < -1 && key > node->right->key) {
        return leftRotate(node);
    }

    // Left Right Case
    if (balance > 1 && key > node->left->key) {
        node->left = leftRotate(node->left);
        return rightRotate(node);
    }

    // Right Left Case
    if (balance < -1 && key < node->right->key) {
        node->right = rightRotate(node->right);
        return leftRotate(node);
    }

    return node;
}

// Function to get the node with the minimum key value
AVLNode* minValueNode(AVLNode* node) {
    AVLNode* current = node;
    while (current->left != NULL) {
        current = current->left;
    }
    return current;
}

// Function to delete a key-value pair from the AVL tree
AVLNode* deleteNode(AVLNode* root, int key) {
    // Step 1: Perform normal BST delete
    if (root == NULL) return root;

    // If the key to be deleted is smaller than the root's key, then it lies in the left subtree
    if (key < root->key) {
        root->left = deleteNode(root->left, key);
    }
    // If the key to be deleted is larger than the root's key, then it lies in the right subtree
    else if (key > root->key) {
        root->right = deleteNode(root->right, key);
    }
    // If key is the same as root's key, then this is the node to be deleted
    else {
        // Node with only one child or no child
        if (root->left == NULL) {
            AVLNode* temp = root->right;
            free(root);
            return temp;
        }
        else if (root->right == NULL) {
            AVLNode* temp = root->left;
            free(root);
            return temp;
        }

        // Node with two children: Get the inorder successor (smallest in the right subtree)
        AVLNode* temp = minValueNode(root->right);

        // Copy the inorder successor's content to this node
        root->key = temp->key;
        root->value = temp->value;

        // Delete the inorder successor
        root->right = deleteNode(root->right, temp->key);
    }

    // Step 2: Update height of this ancestor node
    root->height = 1 + (height(root->left) > height(root->right) ? height(root->left) : height(root->right));

    // Step 3: Get the balance factor to check whether this node became unbalanced
    int balance = getBalance(root);

    // If this node becomes unbalanced, then there are 4 cases

    // Left Left Case
    if (balance > 1 && getBalance(root->left) >= 0) {
        return rightRotate(root);
    }

    // Right Right Case
    if (balance < -1 && getBalance(root->right) <= 0) {
        return leftRotate(root);
    }

    // Left Right Case
    if (balance > 1 && getBalance(root->left) < 0) {
        root->left = leftRotate(root->left);
        return rightRotate(root);
    }

    // Right Left Case
    if (balance < -1 && getBalance(root->right) > 0) {
        root->right = rightRotate(root->right);
        return leftRotate(root);
    }

    return root;
}

// Function to print the inorder traversal of the AVL tree
void inorder(AVLNode* root) {
    if (root != NULL) {
        inorder(root->left);
        printf("Key: %d, Value: %d\n", root->key, root->value);
        inorder(root->right);
    }
}

// Driver function to test the AVL tree
int main() {
    AVLNode* root = NULL;

    // Insert key-value pairs
    root = insert(root, 10, 100);
    root = insert(root, 20, 200);
    root = insert(root, 5, 50);
    root = insert(root, 6, 60);
    root = insert(root, 30, 300);

    printf("Inorder traversal of the AVL tree:\n");
    inorder(root);

    // Delete a node
    root = deleteNode(root, 20);
    printf("\nInorder traversal after deleting key 20:\n");
    inorder(root);

    return 0;
}

