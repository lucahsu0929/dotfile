#include <stdio.h>
#include <stdlib.h>
#include <limits.h>

#define MAX_NODES 1000 // Maximum number of nodes in the tree

// Array representation of the AVL tree
int tree[MAX_NODES];      // Stores keys
int left[MAX_NODES];      // Stores left child indices
int right[MAX_NODES];     // Stores right child indices
int height[MAX_NODES];    // Stores height of each node
int root = -1;            // Root index
int next_free = 0;        // Next available index

// Initialize the tree
void init_tree() {
    for (int i = 0; i < MAX_NODES; i++) {
        tree[i] = INT_MIN;
        left[i] = -1;
        right[i] = -1;
        height[i] = 0;
    }
}

// Utility function to get the height of a node
int get_height(int index) {
    return (index == -1) ? 0 : height[index];
}

// Utility function to calculate the balance factor of a node
int get_balance(int index) {
    if (index == -1) return 0;
    return get_height(left[index]) - get_height(right[index]);
}

// Right rotation
int rotate_right(int y) {
    int x = left[y];
    int T = right[x];

    // Perform rotation
    right[x] = y;
    left[y] = T;

    // Update heights
    height[y] = 1 + ((get_height(left[y]) > get_height(right[y])) ? get_height(left[y]) : get_height(right[y]));
    height[x] = 1 + ((get_height(left[x]) > get_height(right[x])) ? get_height(left[x]) : get_height(right[x]));

    return x; // New root
}

// Left rotation
int rotate_left(int x) {
    int y = right[x];
    int T = left[y];

    // Perform rotation
    left[y] = x;
    right[x] = T;

    // Update heights
    height[x] = 1 + ((get_height(left[x]) > get_height(right[x])) ? get_height(left[x]) : get_height(right[x]));
    height[y] = 1 + ((get_height(left[y]) > get_height(right[y])) ? get_height(left[y]) : get_height(right[y]));

    return y; // New root
}

// Insert a key into the AVL tree
int insert(int index, int key) {
    if (index == -1) {
        int new_node = next_free++;
        tree[new_node] = key;
        left[new_node] = -1;
        right[new_node] = -1;
        height[new_node] = 1;
        return new_node;
    }

    if (key < tree[index]) {
        left[index] = insert(left[index], key);
    } else if (key > tree[index]) {
        right[index] = insert(right[index], key);
    } else {
        return index; // No duplicate keys allowed
    }

    // Update height
    height[index] = 1 + ((get_height(left[index]) > get_height(right[index])) ? get_height(left[index]) : get_height(right[index]));

    // Balance the tree
    int balance = get_balance(index);

    // Left Left Case
    if (balance > 1 && key < tree[left[index]]) {
        return rotate_right(index);
    }

    // Right Right Case
    if (balance < -1 && key > tree[right[index]]) {
        return rotate_left(index);
    }

    // Left Right Case
    if (balance > 1 && key > tree[left[index]]) {
        left[index] = rotate_left(left[index]);
        return rotate_right(index);
    }

    // Right Left Case
    if (balance < -1 && key < tree[right[index]]) {
        right[index] = rotate_right(right[index]);
        return rotate_left(index);
    }

    return index;
}

// Find the node with the minimum key
int find_min(int index) {
    while (left[index] != -1) {
        index = left[index];
    }
    return index;
}

// Delete a key from the AVL tree
int delete(int index, int key) {
    if (index == -1) return index;

    if (key < tree[index]) {
        left[index] = delete(left[index], key);
    } else if (key > tree[index]) {
        right[index] = delete(right[index], key);
    } else {
        if (left[index] == -1 || right[index] == -1) {
            int temp = (left[index] != -1) ? left[index] : right[index];
            if (temp == -1) {
                index = -1;
            } else {
                tree[index] = tree[temp];
                left[index] = left[temp];
                right[index] = right[temp];
                height[index] = height[temp];
            }
        } else {
            int temp = find_min(right[index]);
            tree[index] = tree[temp];
            right[index] = delete(right[index], tree[temp]);
        }
    }

    if (index == -1) return index;

    // Update height
    height[index] = 1 + ((get_height(left[index]) > get_height(right[index])) ? get_height(left[index]) : get_height(right[index]));

    // Balance the tree
    int balance = get_balance(index);

    // Left Left Case
    if (balance > 1 && get_balance(left[index]) >= 0) {
        return rotate_right(index);
    }

    // Left Right Case
    if (balance > 1 && get_balance(left[index]) < 0) {
        left[index] = rotate_left(left[index]);
        return rotate_right(index);
    }

    // Right Right Case
    if (balance < -1 && get_balance(right[index]) <= 0) {
        return rotate_left(index);
    }

    // Right Left Case
    if (balance < -1 && get_balance(right[index]) > 0) {
        right[index] = rotate_right(right[index]);
        return rotate_left(index);
    }

    return index;
}

// Inorder traversal
void inorder(int index) {
    if (index == -1) return;
    inorder(left[index]);
    printf("%d ", tree[index]);
    inorder(right[index]);
}

int main() {
    init_tree();

    root = insert(root, 10);
    root = insert(root, 20);
    root = insert(root, 30);
    root = insert(root, 40);
    root = insert(root, 50);
    root = insert(root, 25);

    printf("Inorder traversal: ");
    inorder(root);
    printf("\n");

    root = delete(root, 30);

    printf("Inorder traversal after deletion: ");
    inorder(root);
    printf("\n");

    return 0;
}

