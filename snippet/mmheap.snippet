#include <stdio.h>
#include <stdlib.h>
#include <limits.h>

#define MAX_SIZE 100 // Maximum size of the tree

int tree[MAX_SIZE]; // Array representation of the Min-Max Tree
int size = 0;       // Current number of elements in the tree

// Function prototypes
int parent(int i);
int leftChild(int i);
int rightChild(int i);
void swap(int *a, int *b);
int isMinLevel(int index);
void bubbleUp(int index);
void bubbleUpMin(int index);
void bubbleUpMax(int index);
void insert(int key);
void bubbleDown(int index);
int deleteMin();
int deleteMax();
void display();

// Function implementations
int parent(int i) {
    return (i - 1) / 2;
}

int leftChild(int i) {
    return 2 * i + 1;
}

int rightChild(int i) {
    return 2 * i + 2;
}

void swap(int *a, int *b) {
    int temp = *a;
    *a = *b;
    *b = temp;
}

int isMinLevel(int index) {
    int level = 0;
    while (index > 0) {
        index = parent(index);
        level++;
    }
    return level % 2 == 0;
}

void bubbleUpMin(int index) {
    if (index <= 2) return;
    int grandparentIdx = parent(parent(index));
    if (tree[index] < tree[grandparentIdx]) {
        swap(&tree[index], &tree[grandparentIdx]);
        bubbleUpMin(grandparentIdx);
    }
}

void bubbleUpMax(int index) {
    if (index <= 2) return;
    int grandparentIdx = parent(parent(index));
    if (tree[index] > tree[grandparentIdx]) {
        swap(&tree[index], &tree[grandparentIdx]);
        bubbleUpMax(grandparentIdx);
    }
}

void bubbleUp(int index) {
    if (index == 0) return;

    int parentIdx = parent(index);

    if (isMinLevel(index)) {
        if (tree[index] > tree[parentIdx]) {
            swap(&tree[index], &tree[parentIdx]);
            bubbleUpMax(parentIdx);
        } else {
            bubbleUpMin(index);
        }
    } else {
        if (tree[index] < tree[parentIdx]) {
            swap(&tree[index], &tree[parentIdx]);
            bubbleUpMin(parentIdx);
        } else {
            bubbleUpMax(index);
        }
    }
}

void insert(int key) {
    if (size >= MAX_SIZE) {
        printf("Error: Tree is full.\n");
        return;
    }

    tree[size] = key;
    size++;
    bubbleUp(size - 1);
}

void bubbleDown(int index) {
    int left = leftChild(index);
    int right = rightChild(index);

    if (left >= size) return; // No children

    if (isMinLevel(index)) {
        int smallest = index;

        // Find the smallest among index, children, and grandchildren
        if (tree[left] < tree[smallest]) smallest = left;
        if (right < size && tree[right] < tree[smallest]) smallest = right;

        if (smallest != index) {
            swap(&tree[index], &tree[smallest]);

            if (smallest == left || smallest == right) {
                bubbleDown(smallest);
            } else {
                int childIdx = parent(smallest);
                if (tree[smallest] > tree[childIdx]) {
                    swap(&tree[smallest], &tree[childIdx]);
                }
                bubbleDown(smallest);
            }
        }
    } else {
        int largest = index;

        // Find the largest among index, children, and grandchildren
        if (tree[left] > tree[largest]) largest = left;
        if (right < size && tree[right] > tree[largest]) largest = right;

        if (largest != index) {
            swap(&tree[index], &tree[largest]);

            if (largest == left || largest == right) {
                bubbleDown(largest);
            } else {
                int childIdx = parent(largest);
                if (tree[largest] < tree[childIdx]) {
                    swap(&tree[largest], &tree[childIdx]);
                }
                bubbleDown(largest);
            }
        }
    }
}

int deleteMin() {
    if (size == 0) {
        printf("Error: Tree is empty.\n");
        return INT_MIN;
    }

    int min = tree[0];
    tree[0] = tree[size - 1];
    size--;
    bubbleDown(0);
    return min;
}

int deleteMax() {
    if (size == 0) {
        printf("Error: Tree is empty.\n");
        return INT_MIN;
    }

    int maxIndex = (size == 1 || tree[1] > tree[2]) ? 1 : 2;
    int max = tree[maxIndex];
    tree[maxIndex] = tree[size - 1];
    size--;
    bubbleDown(maxIndex);
    return max;
}

void display() {
    for (int i = 0; i < size; i++) {
        printf("%d ", tree[i]);
    }
    printf("\n");
}

int main() {
    insert(10);
    insert(20);
    insert(5);
    insert(30);
    insert(15);

    printf("Tree after insertions: ");
    display();

    printf("Deleted Min: %d\n", deleteMin());
    printf("Tree after deleting Min: ");
    display();

    printf("Deleted Max: %d\n", deleteMax());
    printf("Tree after deleting Max: ");
    display();

    return 0;
}

