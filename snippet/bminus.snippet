#include <stdio.h>
#include <stdlib.h>
#include <stdbool.h>

#define MAX 3 // Maximum degree of B-tree (t = 2, so max children = 2t = 4, max keys = 2t-1 = 3)

// Define a B-tree node using arrays
typedef struct {
    int keys[MAX];         // Array to store keys
    int children[MAX + 1]; // Array to store indices of children
    int num_keys;          // Number of keys in the node
    bool is_leaf;          // Is this node a leaf
} BTreeNode;

#define MAX_NODES 100
BTreeNode tree[MAX_NODES]; // Array to simulate a dynamic allocation of nodes
int node_count = 0;        // Counter for the number of nodes

// Initialize a new B-tree node
int create_node(bool is_leaf) {
    tree[node_count].num_keys = 0;
    tree[node_count].is_leaf = is_leaf;
    for (int i = 0; i < MAX; i++) {
        tree[node_count].keys[i] = 0;
    }
    for (int i = 0; i <= MAX; i++) {
        tree[node_count].children[i] = -1; // -1 represents no child
    }
    return node_count++;
}

// Split the child of a node
void split_child(int parent_index, int child_index, int i) {
    int child = tree[parent_index].children[child_index];
    int new_child = create_node(tree[child].is_leaf);
    tree[new_child].num_keys = MAX / 2;

    // Move second half of keys to the new child
    for (int j = 0; j < MAX / 2; j++) {
        tree[new_child].keys[j] = tree[child].keys[j + MAX / 2 + 1];
    }

    // If not a leaf, move the corresponding children
    if (!tree[child].is_leaf) {
        for (int j = 0; j <= MAX / 2; j++) {
            tree[new_child].children[j] = tree[child].children[j + MAX / 2 + 1];
        }
    }

    // Adjust the number of keys in the old child
    tree[child].num_keys = MAX / 2;

    // Shift children of the parent to insert the new child
    for (int j = tree[parent_index].num_keys + 1; j > i + 1; j--) {
        tree[parent_index].children[j] = tree[parent_index].children[j - 1];
    }
    tree[parent_index].children[i + 1] = new_child;

    // Shift keys of the parent to insert the median
    for (int j = tree[parent_index].num_keys; j > i; j--) {
        tree[parent_index].keys[j] = tree[parent_index].keys[j - 1];
    }
    tree[parent_index].keys[i] = tree[child].keys[MAX / 2];

    // Increment the number of keys in the parent
    tree[parent_index].num_keys++;
}

// Insert non-full node
void insert_non_full(int node_index, int key) {
    int i = tree[node_index].num_keys - 1;

    // If the node is a leaf
    if (tree[node_index].is_leaf) {
        // Find the correct position to insert the key
        while (i >= 0 && key < tree[node_index].keys[i]) {
            tree[node_index].keys[i + 1] = tree[node_index].keys[i];
            i--;
        }
        // Insert the key
        tree[node_index].keys[i + 1] = key;
        tree[node_index].num_keys++;
    } else {
        // Find the child that will receive the new key
        while (i >= 0 && key < tree[node_index].keys[i]) {
            i--;
        }
        i++;

        // If the child is full, split it
        if (tree[tree[node_index].children[i]].num_keys == MAX) {
            split_child(node_index, i, i);
            if (key > tree[node_index].keys[i]) {
                i++;
            }
        }
        insert_non_full(tree[node_index].children[i], key);
    }
}

// Insert a key into the B-tree
int insert(int root, int key) {
    if (tree[root].num_keys == MAX) {
        int new_root = create_node(false);
        tree[new_root].children[0] = root;
        split_child(new_root, 0, 0);
        insert_non_full(new_root, key);
        return new_root;
    } else {
        insert_non_full(root, key);
        return root;
    }
}

// Search for a key in the B-tree
bool search(int root, int key) {
    int i = 0;
    while (i < tree[root].num_keys && key > tree[root].keys[i]) {
        i++;
    }
    if (i < tree[root].num_keys && key == tree[root].keys[i]) {
        return true;
    }
    if (tree[root].is_leaf) {
        return false;
    } else {
        return search(tree[root].children[i], key);
    }
}

// Print the B-tree
void print_tree(int root, int level) {
    if (root == -1) return;
    printf("Level %d [", level);
    for (int i = 0; i < tree[root].num_keys; i++) {
        printf(" %d", tree[root].keys[i]);
    }
    printf(" ]\n");
    if (!tree[root].is_leaf) {
        for (int i = 0; i <= tree[root].num_keys; i++) {
            print_tree(tree[root].children[i], level + 1);
        }
    }
}

// Main function to test the B-tree
int main() {
    int root = create_node(true);

    // Insert keys into the B-tree
    int keys[] = {10, 20, 5, 6, 12, 30, 7, 17};
    for (int i = 0; i < sizeof(keys) / sizeof(keys[0]); i++) {
        root = insert(root, keys[i]);
    }

    // Print the B-tree
    printf("B-tree structure:\n");
    print_tree(root, 0);

    // Search for keys in the B-tree
    printf("Search 12: %s\n", search(root, 12) ? "Found" : "Not Found");
    printf("Search 15: %s\n", search(root, 15) ? "Found" : "Not Found");

    return 0;
}

