#include <stdio.h>
#include <stdlib.h>

#define MIN_DEGREE 2 // Minimum degree (t)

typedef struct BTreeNode {
    int *keys;                     // Array of keys
    struct BTreeNode **children;   // Array of child pointers
    int n;                         // Number of keys
    int isLeaf;                    // Is true if node is leaf
} BTreeNode;

// Create a new B-Tree node
BTreeNode *createNode(int isLeaf) {
    BTreeNode *node = (BTreeNode *)malloc(sizeof(BTreeNode));
    node->keys = (int *)malloc((2 * MIN_DEGREE - 1) * sizeof(int));
    node->children = (BTreeNode **)malloc(2 * MIN_DEGREE * sizeof(BTreeNode *));
    node->n = 0;
    node->isLeaf = isLeaf;
    return node;
}

// Split the child of a parent node
void splitChild(BTreeNode *parent, int i, BTreeNode *child) {
    BTreeNode *newChild = createNode(child->isLeaf);
    newChild->n = MIN_DEGREE - 1;

    for (int j = 0; j < MIN_DEGREE - 1; j++)
        newChild->keys[j] = child->keys[j + MIN_DEGREE];

    if (!child->isLeaf) {
        for (int j = 0; j < MIN_DEGREE; j++)
            newChild->children[j] = child->children[j + MIN_DEGREE];
    }

    child->n = MIN_DEGREE - 1;

    for (int j = parent->n; j >= i + 1; j--)
        parent->children[j + 1] = parent->children[j];

    parent->children[i + 1] = newChild;

    for (int j = parent->n - 1; j >= i; j--)
        parent->keys[j + 1] = parent->keys[j];

    parent->keys[i] = child->keys[MIN_DEGREE - 1];
    parent->n++;
}

// Insert a key into a non-full node
void insertNonFull(BTreeNode *node, int key) {
    int i = node->n - 1;

    if (node->isLeaf) {
        while (i >= 0 && key < node->keys[i]) {
            node->keys[i + 1] = node->keys[i];
            i--;
        }
        node->keys[i + 1] = key;
        node->n++;
    } else {
        while (i >= 0 && key < node->keys[i])
            i--;

        if (node->children[i + 1]->n == 2 * MIN_DEGREE - 1) {
            splitChild(node, i + 1, node->children[i + 1]);

            if (key > node->keys[i + 1])
                i++;
        }
        insertNonFull(node->children[i + 1], key);
    }
}

// Insert a key into the B-Tree
BTreeNode *insert(BTreeNode *root, int key) {
    if (root->n == 2 * MIN_DEGREE - 1) {
        BTreeNode *newRoot = createNode(0);
        newRoot->children[0] = root;
        splitChild(newRoot, 0, root);
        insertNonFull(newRoot, key);
        return newRoot;
    } else {
        insertNonFull(root, key);
        return root;
    }
}

// Print the B-Tree
void printTree(BTreeNode *node, int depth) {
    if (node) {
        for (int i = 0; i < depth; i++)
            printf("  ");
        for (int i = 0; i < node->n; i++)
            printf("%d ", node->keys[i]);
        printf("\n");

        for (int i = 0; i <= node->n; i++)
            printTree(node->children[i], depth + 1);
    }
}

int main() {
    BTreeNode *root = createNode(1);

    int keys[] = {10, 20, 5, 6, 12, 30, 7, 17};
    int n = sizeof(keys) / sizeof(keys[0]);

    for (int i = 0; i < n; i++) {
        root = insert(root, keys[i]);
    }

    printf("B-Tree structure:\n");
    printTree(root, 0);

    return 0;
}

