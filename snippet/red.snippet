#include <stdio.h>
#include <stdlib.h>

// Node color definitions
#define RED 0
#define BLACK 1

// Node structure
typedef struct Node {
    int key;
    int value;
    int color;
    struct Node *left, *right, *parent;
} Node;

// Tree structure
typedef struct RBTree {
    Node *root;
    Node *nil;
} RBTree;

// Function to create a new node
Node* createNode(RBTree *tree, int key, int value) {
    Node *node = (Node *)malloc(sizeof(Node));
    node->key = key;
    node->value = value;
    node->color = RED;
    node->left = tree->nil;
    node->right = tree->nil;
    node->parent = tree->nil;
    return node;
}

// Function to initialize the tree
RBTree* createTree() {
    RBTree *tree = (RBTree *)malloc(sizeof(RBTree));
    tree->nil = (Node *)malloc(sizeof(Node));
    tree->nil->color = BLACK;
    tree->root = tree->nil;
    return tree;
}

// Left rotate
void leftRotate(RBTree *tree, Node *x) {
    Node *y = x->right;
    x->right = y->left;
    if (y->left != tree->nil) {
        y->left->parent = x;
    }
    y->parent = x->parent;
    if (x->parent == tree->nil) {
        tree->root = y;
    } else if (x == x->parent->left) {
        x->parent->left = y;
    } else {
        x->parent->right = y;
    }
    y->left = x;
    x->parent = y;
}

// Right rotate
void rightRotate(RBTree *tree, Node *x) {
    Node *y = x->left;
    x->left = y->right;
    if (y->right != tree->nil) {
        y->right->parent = x;
    }
    y->parent = x->parent;
    if (x->parent == tree->nil) {
        tree->root = y;
    } else if (x == x->parent->right) {
        x->parent->right = y;
    } else {
        x->parent->left = y;
    }
    y->right = x;
    x->parent = y;
}

// Fix violations after insertion
void insertFixup(RBTree *tree, Node *z) {
    while (z->parent->color == RED) {
        if (z->parent == z->parent->parent->left) {
            Node *y = z->parent->parent->right;
            if (y->color == RED) { // Case 1
                z->parent->color = BLACK;
                y->color = BLACK;
                z->parent->parent->color = RED;
                z = z->parent->parent;
            } else {
                if (z == z->parent->right) { // Case 2
                    z = z->parent;
                    leftRotate(tree, z);
                }
                z->parent->color = BLACK; // Case 3
                z->parent->parent->color = RED;
                rightRotate(tree, z->parent->parent);
            }
        } else {
            Node *y = z->parent->parent->left;
            if (y->color == RED) { // Case 1
                z->parent->color = BLACK;
                y->color = BLACK;
                z->parent->parent->color = RED;
                z = z->parent->parent;
            } else {
                if (z == z->parent->left) { // Case 2
                    z = z->parent;
                    rightRotate(tree, z);
                }
                z->parent->color = BLACK; // Case 3
                z->parent->parent->color = RED;
                leftRotate(tree, z->parent->parent);
            }
        }
    }
    tree->root->color = BLACK;
}

// Insert a new node
void insert(RBTree *tree, int key, int value) {
    Node *z = createNode(tree, key, value);
    Node *y = tree->nil;
    Node *x = tree->root;
    while (x != tree->nil) {
        y = x;
        if (z->key < x->key) {
            x = x->left;
        } else {
            x = x->right;
        }
    }
    z->parent = y;
    if (y == tree->nil) {
        tree->root = z;
    } else if (z->key < y->key) {
        y->left = z;
    } else {
        y->right = z;
    }
    z->left = tree->nil;
    z->right = tree->nil;
    z->color = RED;
    insertFixup(tree, z);
}

// Transplant nodes
void transplant(RBTree *tree, Node *u, Node *v) {
    if (u->parent == tree->nil) {
        tree->root = v;
    } else if (u == u->parent->left) {
        u->parent->left = v;
    } else {
        u->parent->right = v;
    }
    v->parent = u->parent;
}

// Find the minimum node in a subtree
Node* treeMinimum(RBTree *tree, Node *x) {
    while (x->left != tree->nil) {
        x = x->left;
    }
    return x;
}

// Fix violations after deletion
void deleteFixup(RBTree *tree, Node *x) {
    while (x != tree->root && x->color == BLACK) {
        if (x == x->parent->left) {
            Node *w = x->parent->right;
            if (w->color == RED) { // Case 1
                w->color = BLACK;
                x->parent->color = RED;
                leftRotate(tree, x->parent);
                w = x->parent->right;
            }
            if (w->left->color == BLACK && w->right->color == BLACK) { // Case 2
                w->color = RED;
                x = x->parent;
            } else {
                if (w->right->color == BLACK) { // Case 3
                    w->left->color = BLACK;
                    w->color = RED;
                    rightRotate(tree, w);
                    w = x->parent->right;
                }
                w->color = x->parent->color; // Case 4
                x->parent->color = BLACK;
                w->right->color = BLACK;
                leftRotate(tree, x->parent);
                x = tree->root;
            }
        } else {
            Node *w = x->parent->left;
            if (w->color == RED) { // Case 1
                w->color = BLACK;
                x->parent->color = RED;
                rightRotate(tree, x->parent);
                w = x->parent->left;
            }
            if (w->right->color == BLACK && w->left->color == BLACK) { // Case 2
                w->color = RED;
                x = x->parent;
            } else {
                if (w->left->color == BLACK) { // Case 3
                    w->right->color = BLACK;
                    w->color = RED;
                    leftRotate(tree, w);
                    w = x->parent->left;
                }
                w->color = x->parent->color; // Case 4
                x->parent->color = BLACK;
                w->left->color = BLACK;
                rightRotate(tree, x->parent);
                x = tree->root;
            }
        }
    }
    x->color = BLACK;
}

// Delete a node
void deleteNode(RBTree *tree, Node *z) {
    Node *y = z;
    Node *x;
    int yOriginalColor = y->color;
    if (z->left == tree->nil) {
        x = z->right;
        transplant(tree, z, z->right);
    } else if (z->right == tree->nil) {
        x = z->left;
        transplant(tree, z, z->left);
    } else {
        y = treeMinimum(tree, z->right);
        yOriginalColor = y->color;
        x = y->right;
        if (y->parent == z) {
            x->parent = y;
        } else {
            transplant(tree, y, y->right);
            y->right = z->right;
            y->right->parent = y;
        }
        transplant(tree, z, y);
        y->left = z->left;
        y->left->parent = y;
        y->color = z->color;
    }
    if (yOriginalColor == BLACK) {
        deleteFixup(tree, x);
    }
    free(z);
}

// Search for a node with a given key
Node* search(RBTree *tree, int key) {
    Node *current = tree->root;
    while (current != tree->nil && current->key != key) {
        if (key < current->key) {
            current = current->left;
        } else {
            current = current->right;
        }
    }
    return current;
}

// Print tree (in-order traversal)
void printTree(Node *node, Node *nil) {
    if (node != nil) {
        printTree(node->left, nil);
        printf("Key: %d, Value: %d, Color: %s\n", node->key, node->value, node->color == RED ? "RED" : "BLACK");
        printTree(node->right, nil);
    }
}

// Main function for testing
int main() {
    RBTree *tree = createTree();

    // Insertion
    insert(tree, 10, 100);
    insert(tree, 20, 200);
    insert(tree, 30, 300);
    insert(tree, 15, 150);
    printf("Tree after insertion:\n");
    printTree(tree->root, tree->nil);

    // Deletion
    Node *node = search(tree, 20);
    if (node != tree->nil) {
        deleteNode(tree, node);
    }
    printf("\nTree after deletion of key 20:\n");
    printTree(tree->root, tree->nil);

    return 0;
}

