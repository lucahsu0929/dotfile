#include <stdio.h>
#include <stdlib.h>
#include <limits.h>

// Define constants for colors
#define RED 1
#define BLACK 0
#define NIL -1

// Define the maximum number of nodes
#define MAX_NODES 1000

// Arrays to represent node attributes
int key[MAX_NODES];
int parent[MAX_NODES];
int left[MAX_NODES];
int right[MAX_NODES];
int color[MAX_NODES];

int root = NIL; // Root of the Red-Black Tree
int node_count = 0; // Total number of nodes

// Helper function to initialize a new node
int create_node(int k) {
    int index = node_count++;
    key[index] = k;
    parent[index] = NIL;
    left[index] = NIL;
    right[index] = NIL;
    color[index] = RED; // New nodes are always red
    return index;
}

// Left rotate operation
void left_rotate(int x) {
    int y = right[x];
    right[x] = left[y];
    if (left[y] != NIL) parent[left[y]] = x;
    parent[y] = parent[x];
    if (parent[x] == NIL) root = y;
    else if (x == left[parent[x]]) left[parent[x]] = y;
    else right[parent[x]] = y;
    left[y] = x;
    parent[x] = y;
}

// Right rotate operation
void right_rotate(int x) {
    int y = left[x];
    left[x] = right[y];
    if (right[y] != NIL) parent[right[y]] = x;
    parent[y] = parent[x];
    if (parent[x] == NIL) root = y;
    else if (x == right[parent[x]]) right[parent[x]] = y;
    else left[parent[x]] = y;
    right[y] = x;
    parent[x] = y;
}

// Fix the Red-Black Tree after insertion
void insert_fixup(int z) {
    while (color[parent[z]] == RED) {
        if (parent[z] == left[parent[parent[z]]]) {
            int y = right[parent[parent[z]]];
            if (color[y] == RED) { // Case 1
                color[parent[z]] = BLACK;
                color[y] = BLACK;
                color[parent[parent[z]]] = RED;
                z = parent[parent[z]];
            } else {
                if (z == right[parent[z]]) { // Case 2
                    z = parent[z];
                    left_rotate(z);
                }
                color[parent[z]] = BLACK; // Case 3
                color[parent[parent[z]]] = RED;
                right_rotate(parent[parent[z]]);
            }
        } else {
            int y = left[parent[parent[z]]];
            if (color[y] == RED) { // Case 1
                color[parent[z]] = BLACK;
                color[y] = BLACK;
                color[parent[parent[z]]] = RED;
                z = parent[parent[z]];
            } else {
                if (z == left[parent[z]]) { // Case 2
                    z = parent[z];
                    right_rotate(z);
                }
                color[parent[z]] = BLACK; // Case 3
                color[parent[parent[z]]] = RED;
                left_rotate(parent[parent[z]]);
            }
        }
    }
    color[root] = BLACK;
}

// Insert a new key into the Red-Black Tree
void insert(int k) {
    int z = create_node(k);
    int y = NIL;
    int x = root;
    while (x != NIL) {
        y = x;
        if (k < key[x]) x = left[x];
        else x = right[x];
    }
    parent[z] = y;
    if (y == NIL) root = z;
    else if (k < key[y]) left[y] = z;
    else right[y] = z;
    color[z] = RED;
    insert_fixup(z);
}

// Transplant subtrees during deletion
void transplant(int u, int v) {
    if (parent[u] == NIL) root = v;
    else if (u == left[parent[u]]) left[parent[u]] = v;
    else right[parent[u]] = v;
    if (v != NIL) parent[v] = parent[u];
}

// Find the minimum node in a subtree
int tree_minimum(int x) {
    while (left[x] != NIL) x = left[x];
    return x;
}

// Fix the Red-Black Tree after deletion
void delete_fixup(int x) {
    while (x != root && color[x] == BLACK) {
        if (x == left[parent[x]]) {
            int w = right[parent[x]];
            if (color[w] == RED) { // Case 1
                color[w] = BLACK;
                color[parent[x]] = RED;
                left_rotate(parent[x]);
                w = right[parent[x]];
            }
            if (color[left[w]] == BLACK && color[right[w]] == BLACK) { // Case 2
                color[w] = RED;
                x = parent[x];
            } else {
                if (color[right[w]] == BLACK) { // Case 3
                    color[left[w]] = BLACK;
                    color[w] = RED;
                    right_rotate(w);
                    w = right[parent[x]];
                }
                color[w] = color[parent[x]]; // Case 4
                color[parent[x]] = BLACK;
                color[right[w]] = BLACK;
                left_rotate(parent[x]);
                x = root;
            }
        } else {
            int w = left[parent[x]];
            if (color[w] == RED) { // Case 1
                color[w] = BLACK;
                color[parent[x]] = RED;
                right_rotate(parent[x]);
                w = left[parent[x]];
            }
            if (color[right[w]] == BLACK && color[left[w]] == BLACK) { // Case 2
                color[w] = RED;
                x = parent[x];
            } else {
                if (color[left[w]] == BLACK) { // Case 3
                    color[right[w]] = BLACK;
                    color[w] = RED;
                    left_rotate(w);
                    w = left[parent[x]];
                }
                color[w] = color[parent[x]]; // Case 4
                color[parent[x]] = BLACK;
                color[left[w]] = BLACK;
                right_rotate(parent[x]);
                x = root;
            }
        }
    }
    color[x] = BLACK;
}

// Delete a key from the Red-Black Tree
void delete(int k) {
    int z = root;
    while (z != NIL && key[z] != k) {
        if (k < key[z]) z = left[z];
        else z = right[z];
    }
    if (z == NIL) return; // Key not found

    int y = z;
    int y_original_color = color[y];
    int x;
    if (left[z] == NIL) {
        x = right[z];
        transplant(z, right[z]);
    } else if (right[z] == NIL) {
        x = left[z];
        transplant(z, left[z]);
    } else {
        y = tree_minimum(right[z]);
        y_original_color = color[y];
        x = right[y];
        if (parent[y] == z) parent[x] = y;
        else {
            transplant(y, right[y]);
            right[y] = right[z];
            parent[right[y]] = y;
        }
        transplant(z, y);
        left[y] = left[z];
        parent[left[y]] = y;
        color[y] = color[z];
    }
    if (y_original_color == BLACK) delete_fixup(x);
}

// In-order traversal for debugging
void inorder(int x) {
    if (x != NIL) {
        inorder(left[x]);
        printf("%d ", key[x]);
        inorder(right[x]);
    }
}

int main() {
    for (int i = 0; i < MAX_NODES; i++) {
        key[i] = NIL;
        parent[i] = NIL;
        left[i] = NIL;
        right[i] = NIL;
        color[i] = BLACK;
    }

    insert(20);
    insert(15);
    insert(25);
    insert(10);
    insert(5);
    insert(1);
    delete(15);
    delete(10);

    printf("In-order traversal: ");
    inorder(root);
    printf("\n");

    return 0;
}

