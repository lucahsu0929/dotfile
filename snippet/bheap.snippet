#include <stdio.h>
#include <stdlib.h>
#include <limits.h>

#define MAX_NODES 100 // Define the maximum number of nodes

typedef struct {
    int key;
    int degree;
    int parent;
    int child[MAX_NODES];
    int sibling;
} Node;

Node heap[MAX_NODES];
int nodeCount = 0;

// Function to initialize a node
void initializeNode(int index, int key) {
    heap[index].key = key;
    heap[index].degree = 0;
    heap[index].parent = -1;
    for (int i = 0; i < MAX_NODES; i++) heap[index].child[i] = -1;
    heap[index].sibling = -1;
}

// Function to link two binomial trees
void linkTrees(int root1, int root2) {
    heap[root1].sibling = heap[root2].child[heap[root2].degree];
    heap[root2].child[heap[root2].degree] = root1;
    heap[root1].parent = root2;
    heap[root2].degree++;
}

// Merge two heaps
int mergeHeaps(int root1, int root2) {
    if (root1 == -1) return root2;
    if (root2 == -1) return root1;

    if (heap[root1].degree <= heap[root2].degree) {
        heap[root1].sibling = mergeHeaps(heap[root1].sibling, root2);
        return root1;
    } else {
        heap[root2].sibling = mergeHeaps(root1, heap[root2].sibling);
        return root2;
    }
}

// Union two heaps
int unionHeaps(int root1, int root2) {
    int newRoot = mergeHeaps(root1, root2);
    if (newRoot == -1) return -1;

    int prev = -1, curr = newRoot, next = heap[curr].sibling;

    while (next != -1) {
        if (heap[curr].degree != heap[next].degree || 
            (heap[next].sibling != -1 && heap[heap[next].sibling].degree == heap[curr].degree)) {
            prev = curr;
            curr = next;
        } else if (heap[curr].key <= heap[next].key) {
            heap[curr].sibling = heap[next].sibling;
            linkTrees(next, curr);
        } else {
            if (prev == -1) newRoot = next;
            else heap[prev].sibling = next;
            linkTrees(curr, next);
            curr = next;
        }
        next = heap[curr].sibling;
    }
    return newRoot;
}

// Insert a key into the heap
int insertKey(int root, int key) {
    initializeNode(nodeCount, key);
    return unionHeaps(root, nodeCount++);
}

// Find the minimum key in the heap
int findMin(int root) {
    int min = INT_MAX, minIndex = -1;
    int curr = root;

    while (curr != -1) {
        if (heap[curr].key < min) {
            min = heap[curr].key;
            minIndex = curr;
        }
        curr = heap[curr].sibling;
    }
    return minIndex;
}

// Extract the minimum key
int extractMin(int *root) {
    int minIndex = findMin(*root);
    if (minIndex == -1) return -1;

    int curr = *root, prev = -1;
    while (curr != minIndex) {
        prev = curr;
        curr = heap[curr].sibling;
    }
    if (prev == -1) *root = heap[curr].sibling;
    else heap[prev].sibling = heap[curr].sibling;

    int newRoot = -1;
    for (int i = heap[minIndex].degree - 1; i >= 0; i--) {
        int child = heap[minIndex].child[i];
        heap[child].parent = -1;
        heap[child].sibling = newRoot;
        newRoot = child;
    }

    *root = unionHeaps(*root, newRoot);
    return heap[minIndex].key;
}

// Print the heap (for debugging)
void printHeap(int root) {
    if (root == -1) return;
    printf("Node %d (key = %d, degree = %d): ", root, heap[root].key, heap[root].degree);
    for (int i = 0; i < heap[root].degree; i++) {
        printf("%d ", heap[root].child[i]);
    }
    printf("\n");
    printHeap(heap[root].sibling);
}

int main() {
    int root = -1;

    root = insertKey(root, 10);
    root = insertKey(root, 20);
    root = insertKey(root, 5);
    root = insertKey(root, 30);

    printf("Heap after insertions:\n");
    printHeap(root);

    printf("Extracted min: %d\n", extractMin(&root));
    printf("Heap after extraction:\n");
    printHeap(root);

    return 0;
}

