#include <stdio.h>
#include <stdlib.h>
#include <string.h>

#define ALPHABET_SIZE 26 // Assume only lowercase 'a' to 'z'
#define CHAR_TO_INDEX(c) ((c) - 'a') // Map character to index

// Trie node represented as arrays
int trie[1000000][ALPHABET_SIZE] = {{0}}; // Array for child nodes
int isEndOfWord[1000000] = {0};          // Array to mark end of word
int nodeCount = 1;                      // Start with root node (index 0)

// Insert a word into the trie
void insert(const char *key) {
    int level, length = strlen(key);
    int index, currentNode = 0;

    for (level = 0; level < length; level++) {
        index = CHAR_TO_INDEX(key[level]);
        // If the path does not exist, create a new node
        if (trie[currentNode][index] == 0) {
            trie[currentNode][index] = nodeCount++;
        }
        currentNode = trie[currentNode][index];
    }
    // Mark the end of the word
    isEndOfWord[currentNode] = 1;
}

// Search for a word in the trie
int search(const char *key) {
    int level, length = strlen(key);
    int index, currentNode = 0;

    for (level = 0; level < length; level++) {
        index = CHAR_TO_INDEX(key[level]);
        // If path does not exist, word is not present
        if (trie[currentNode][index] == 0) {
            return 0;
        }
        currentNode = trie[currentNode][index];
    }
    // Check if it is the end of a word
    return isEndOfWord[currentNode];
}

// Helper function to check if a node has children
int hasChildren(int node) {
    for (int i = 0; i < ALPHABET_SIZE; i++) {
        if (trie[node][i] != 0) {
            return 1; // Node has at least one child
        }
    }
    return 0; // No children
}

// Delete a word from the trie
int deleteWord(const char *key, int level, int currentNode) {
    if (currentNode == 0) {
        return 0; // Invalid node
    }

    if (level == strlen(key)) {
        // Reached the end of the word
        if (isEndOfWord[currentNode]) {
            isEndOfWord[currentNode] = 0; // Unmark end of word
            // If node has no children, it can be deleted
            return !hasChildren(currentNode);
        }
    } else {
        int index = CHAR_TO_INDEX(key[level]);
        if (trie[currentNode][index] != 0) {
            // Recursively delete the word
            if (deleteWord(key, level + 1, trie[currentNode][index])) {
                // If child node can be deleted, remove the link
                trie[currentNode][index] = 0;
                // Check if current node can also be deleted
                return !hasChildren(currentNode) && !isEndOfWord[currentNode];
            }
        }
    }
    return 0; // Node cannot be deleted
}

// Public delete function
void delete(const char *key) {
    deleteWord(key, 0, 0);
}

int main() {
    // Example usage
    insert("hello");
    insert("world");
    insert("hi");
    
    printf("Search 'hello': %d\n", search("hello")); // Output: 1
    printf("Search 'world': %d\n", search("world")); // Output: 1
    printf("Search 'hi': %d\n", search("hi"));       // Output: 1
    printf("Search 'hell': %d\n", search("hell"));   // Output: 0

    delete("hello");
    printf("Search 'hello' after deletion: %d\n", search("hello")); // Output: 0

    return 0;
}
